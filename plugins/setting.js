// ùöªùöµùö™ùö™ùö´ ùöæùö≥ùêÉ
const config = require('../config')
const {cmd , commands} = require('../command')
const os = require("os")

cmd({
    pattern: "settings",
    alias: ["setting"],
    react: "‚öôÔ∏è",
    desc: "settings the bot",
    category: "owner"
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isOwner) {
            return reply("*‚õîÔ∏èYou are not the owner.*");
        }

        let desc = `
        
‚ï≠‚îà‚îâ‚îâ‚ö°‚öô  XMD BOT SETTINGS ‚öô‚ö°‚îâ‚îâ‚îà
‚îá
‚îáüíº Work Mode : ùôøùöÑùô±ùôªùô∏ùô≤üåé/ùôøùöÅùô∏ùôëùô∞ùöÉùô¥
‚îáüîä Auto Voice : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚îáüìù Auto Status : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚îá‚å® Auto Typing : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚îáüõ† Auto Read Command : ‚ôª ùôæùôΩ/ùôæùôµùôµ
‚ï∞‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà

   üîó  CUSTOMIZE YOUR SETTINGS ‚§µÔ∏è
   
‚Ü™ Ä·¥á·¥ò ü è ·¥°…™·¥õ ú ·¥õ ú·¥á …¥·¥ú·¥ç ô·¥á Ä  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è s·¥á ü·¥á·¥Ñ·¥õ

    üîß OPTIONS MENU üîß

‚î£‚îÅ WORK MODE ‚§µÔ∏è
‚îÉ   ‚î£ 1.1 üîπ Public Work
‚îÉ   ‚î£ 1.2 üîπ Private Work

‚î£‚îÅ AUTO VOICE ‚§µÔ∏è
‚îÉ   ‚î£ 2.1 üîä Auto Voice On
‚îÉ   ‚îó 2.2 üîï Auto Voice Off

‚î£‚îÅ AUTO STATUS SEEN ‚§µÔ∏è
‚îÉ   ‚î£ 3.1 üëÅ‚Äçüó® Auto Read Status On
‚îÉ   ‚îó 3.2 üëÅ‚ùå Auto Read Status Off

‚î£‚îÅ AUTO TYPING ‚§µÔ∏è
‚îÉ   ‚î£ 4.1 üìù Activate Auto Typing
‚îÉ   ‚îó 4.2 üìù‚ùå Deactivate Auto Typing

‚î£‚îÅ AUTO STICKER ‚§µÔ∏è
‚îÉ   ‚î£ 5.1 üéâ Activate Auto Sticker
‚îÉ   ‚îó 5.2 üéâ‚ùå Deactivate Auto Sticker

‚î£‚îÅ ANTI BAD ‚§µÔ∏è
‚îÉ   ‚î£ 6.1 üö´ Activate Anti Bad
‚îÉ   ‚îó 6.2 üö´‚ùå Deactivate Anti Bad

‚î£‚îÅ AUTO REPLY ‚§µÔ∏è
‚îÉ   ‚î£ 7.1 üí¨ Activate Auto Reply
‚îÉ   ‚îó 7.2 üí¨‚ùå Deactivate Auto Reply

‚î£‚îÅ AUTO RECORDING ‚§µÔ∏è
‚îÉ   ‚î£ 8.1 üé• Activate Auto Recording
‚îÉ   ‚îó 8.2 üé•‚ùå Deactivate Auto Recording

‚î£‚îÅ ALWAYS ONLINE ‚§µÔ∏è
‚îÉ   ‚î£ 9.1 üåê Activate Always Online
‚îÉ   ‚îó 9.2 üåê‚ùå Deactivate Always Online

‚î£‚îÅ ANTI LINK ‚§µÔ∏è
‚îÉ   ‚î£ 10.1 üîó Activate Anti Link
‚îÉ   ‚îó 10.2 üîó‚ùå Deactivate Anti Link
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

        const vv = await conn.sendMessage(from, { 
            image: { url: "https://files.catbox.moe/zjyd13.jpeg" }, // Ici, l'utilisateur peut changer l'URL directement
            caption: desc
        }, { quoted: mek });

        conn.ev.on('messages.upsert', async (msgUpdate) => {
            const msg = msgUpdate.messages[0];
            if (!msg.message || !msg.message.extendedTextMessage) return;

            const selectedOption = msg.message.extendedTextMessage.text.trim();

            if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
                switch (selectedOption) {
                    case '1.1':
                        reply(".update MODE:public" );
                        reply(".restart");
                        break;
                    case '1.2':               
                        reply(".update MODE:private");
                        reply(".restart");
                        break;
                    case '2.1':     
                        reply(".update AUTO_VOICE:true");
                        reply(".restart");
                        break;
                    case '2.2':     
                        reply(".update AUTO_VOICE:false");
                        reply(".restart");
                        break;
                    case '3.1':    
                        reply(".update AUTO_READ_STATUS:true");
                        reply(".restart");
                        break;
                    case '3.2':    
                        reply(".update AUTO_READ_STATUS:false");
                        reply(".restart");
                        break;
                    case '4.1': 
                        reply(".update FAKE_TYPING:true");
                        reply(".restart");
                        break;
                    case '4.2': 
                        reply(".update FAKE_TYPING:false");
                        reply(".restart");
                        break;
                    case '5.1':      
                        reply(".update AUTO_STICKER:true");
                        reply(".restart");
                        break;
                    case '5.2':   
                        reply(".update AUTO_STICKER:false");
                        reply(".restart");
                        break;
                    case '6.1': 
                        reply(".update ANTI_BAD:true");
                        reply(".restart");
                        break;
                    case '6.2':   
                        reply(".update ANTI_BAD:false");
                        reply(".restart");
                        break;
                    case '7.1': 
                        reply(".update AUTO_REPLY:true");
                        reply(".restart");
                        break;
                    case '7.2':   
                        reply(".update AUTO_REPLY:false");
                        reply(".restart");
                        break;
                    case '8.1': 
                        reply(".update FAKE_RECORDING:true");
                        reply(".restart");
                        break;
                    case '8.2':   
                        reply(".update FAKE_RECORDING:false");
                        reply(".restart");
                        break;
                    case '9.1': 
                        reply(".update ALWAYS_ONLINE:true");
                        reply(".restart");
                        break;
                    case '9.2':   
                        reply(".update ALWAYS_ONLINE:false");
                        reply(".restart");
                        break;
                    case '10.1': 
                        reply(".update ANTI_LINK:true");
                        reply(".restart");
                        break;
                    case '10.2':   
                        reply(".update ANTI_LINK:false");
                        reply(".restart");
                        break;
                    default:
                        reply("Invalid option. Please select a valid optionüî¥");
                }

            }
        });

    } catch (e) {
        console.error(e);
        await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } })
        reply('An error occurred while processing your request.');
    }
});